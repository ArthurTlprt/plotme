%{

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

extern int yylex();
extern int yyparse();
extern FILE* yyin;
void yyerror(const char* s);

#define YYSTYPE std::string


%}

%union {
	int ival;
	float fval;
}

%token<fval> FLOAT
%token PLUS MINUS MULTIPLY DIVIDE LEFT RIGHT EQUAL
%token NEWLINE QUIT
%token FUNCTION X VARIABLE
%token MPI EXP SIN COS TAN ARCTAN ARCSIN ARCOS
%left PLUS MINUS
%left MULTIPLY DIVIDE

%type<tab_float> mixed_expression

%start calculation

%%

calculation:
	   | calculation line
;

line: NEWLINE
    | mixed_expression NEWLINE { printf("\tResult: %f\n", $1); }
    | QUIT NEWLINE { printf("bye!\n"); exit(0); }
;

mixed_expression: X { $$ = 42; }
		|	MPI { $$ = M_PI; }
		|	FUNCTION EQUAL mixed_expression	{ $$ = $3; }
		| VARIABLE EQUAL mixed_expression { $$ = $3; }
		| FLOAT                 		 {
			vector<float> tab_val (10);
			fill (tab_val.begin(),tab_val.end(), $1);
		}
	  | mixed_expression PLUS mixed_expression	 { $$ = $1 + $3; }
	  | mixed_expression MINUS mixed_expression	 { $$ = $1 - $3; }
	  | mixed_expression MULTIPLY mixed_expression {
			$$ = std::transform( $1.begin(), $1.end(), $3.begin(), $3.end(), std::multiplies<float>() ); }
	  | mixed_expression DIVIDE mixed_expression	 { $$ = $1 / $3; }
	  | LEFT mixed_expression RIGHT		 { $$ = $2; }
;

//constant : FLOAT { $$ = $1; }

%%

int main() {
	yyin = stdin;

	do {
		yyparse();
	} while(!feof(yyin));
	return 0;
}

void yyerror(const char* s) {
	fprintf(stderr, "Parse error: %s\n", s);
	exit(1);
}
