%{

#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <vector>

extern int yylex();
extern int yyparse();
extern FILE* yyin;

void yyerror(const char* s);
%}

%union {
	int ival;
	float fval;
}

%token<fval> FLOAT
%token PLUS MINUS MULTIPLY DIVIDE LEFT RIGHT EQUAL
%token NEWLINE QUIT
%token FUNCTION X VARIABLE
%token MPI EXP SIN COS TAN ARCTAN ARCSIN ARCOS SQRT
%left PLUS MINUS
%left MULTIPLY DIVIDE

%type<fval> mixed_expression

%start calculation

%%

calculation:
	   | calculation line
;

line: NEWLINE
    | mixed_expression NEWLINE { printf("\tResult: %f\n", $1);}
    | QUIT NEWLINE { printf("bye!\n"); exit(0); }
;

mixed_expression: X { $$ = 42; }
		|	MPI { $$ = M_PI; }
		|	FUNCTION EQUAL mixed_expression	{ $$ = $3; }
		| VARIABLE EQUAL mixed_expression { $$ = $3; }
		| FLOAT                 		 { $$ = $1; }
	  | mixed_expression PLUS mixed_expression	 { $$ = $1 + $3; }
	  | mixed_expression MINUS mixed_expression	 { $$ = $1 - $3; }
	  | mixed_expression MULTIPLY mixed_expression { $$ = $1 * $3; }
	  | mixed_expression DIVIDE mixed_expression	 { $$ = $1 / $3; }
	  | LEFT mixed_expression RIGHT		 { $$ = $2; }
		| SIN LEFT mixed_expression RIGHT { $$ = sin( $3 );}
		| COS LEFT mixed_expression RIGHT { $$ = cos( $3 );}
		| TAN LEFT mixed_expression RIGHT { $$ = tan( $3 );}
		| ARCSIN LEFT mixed_expression RIGHT { $$ = asin( $3 );}
		| ARCOS LEFT mixed_expression RIGHT { $$ = acos( $3 );}
		| ARCTAN LEFT mixed_expression RIGHT { $$ = atan( $3 );}
		| EXP LEFT mixed_expression RIGHT { $$ = exp( $3 );}
		| SQRT LEFT mixed_expression RIGHT { $$ = sqrt( $3 );}
;
%%

int main() {
	yyin = stdin;

	do {
		yyparse();
	} while(!feof(yyin));

	return 0;
}

void yyerror(const char* s) {
	fprintf(stderr, "Parse error: %s\n", s);
	exit(1);
}
