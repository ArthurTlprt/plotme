%{

#include <node.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <vector>
#include <algorithm>
#include <stack>
#include <map>
#include <string>

using namespace std;



extern int yylex();
extern int yyparse();
extern FILE* yyin;
void yyerror(const char* s);

vector<double> values;
vector<int>    postfixee;



%}

%union {
	int ival;
	float fval;
	char* sval;
}

%token<fval> FLOAT
%token<sval> COLOR
%token PLUS MINUS MULTIPLY DIVIDE LEFT RIGHT EQUAL
%token NEWLINE QUIT
%token FUNCTION X VARIABLE
%token MPI EXP SIN COS TAN ARCTAN ARCSIN ARCOS SQRT DRAW
%left PLUS MINUS
%left MULTIPLY DIVIDE

%type<fval> mixed_expression

%start calculation

%%

calculation:
	   | calculation line
;

line: NEWLINE
    | mixed_expression NEWLINE { printf("\tResult: %f\n", $1); }
    | QUIT NEWLINE { printf("bye!\n"); exit(0); }
;

mixed_expression: X { postfixee.push_back(X); values.push_back(0); }
		|	MPI { $$ = M_PI; }
		|	FUNCTION EQUAL mixed_expression	{ $$ = $3; }
		| VARIABLE EQUAL mixed_expression { $$ = $3; }
		| FLOAT                 		 {

		  postfixee.push_back(FLOAT);
			values.push_back($1);
		}

		| mixed_expression PLUS mixed_expression	 { postfixee.push_back(PLUS); values.push_back(0); }
	  | mixed_expression MINUS mixed_expression	 { $$ = $1 - $3; }
	  | mixed_expression MULTIPLY mixed_expression {}
	  | mixed_expression DIVIDE mixed_expression	 { $$ = $1 / $3; }
	  | LEFT mixed_expression RIGHT		 { $$ = $2; }
		| SIN LEFT mixed_expression RIGHT { $$ = sin( $3 );}
		| COS LEFT mixed_expression RIGHT { $$ = cos( $3 );}
		| TAN LEFT mixed_expression RIGHT { $$ = tan( $3 );}
		| ARCSIN LEFT mixed_expression RIGHT { $$ = asin( $3 );}
		| ARCOS LEFT mixed_expression RIGHT { $$ = acos( $3 );}
		| ARCTAN LEFT mixed_expression RIGHT { $$ = atan( $3 );}
		| EXP LEFT mixed_expression RIGHT { $$ = exp( $3 );}
		| SQRT LEFT mixed_expression RIGHT { $$ = sqrt( $3 );}
		| DRAW mixed_expression COLOR { printf("ma couleur est %s",$3); $$=$2 ; }
;

//constant : FLOAT { $$ = $1; }

%%



double Evaluation(double x){

	stack <double> pile;

	double a, b;
	for (int i = 0; i < postfixee.size(); i++) {
		switch (postfixee[i]) {
			case PLUS :
			     a = pile.top(); pile.pop();
					 b = pile.top(); pile.pop();
					 pile.push(a+b);
			break;
			case FLOAT:
			     pile.push(values[i]);
			break;
			case X :
				pile.push(x);
				break;
		}
	}
	return pile.top();
}

namespace demo {

using v8::Exception;
using v8::FunctionCallbackInfo;
using v8::Isolate;
using v8::Local;
using v8::Number;
using v8::Object;
using v8::String;
using v8::Value;
using v8::Array;

void Evaluate(const FunctionCallbackInfo<Value>& args) {
  Isolate* isolate = args.GetIsolate();

  std::system("./lexic/analyzer.out < \" mon input \"");

  Local<Object> coord = Object::New(isolate);
  Local<Array> x = Array::New(isolate);
  Local<Array> y = Array::New(isolate);

  for(unsigned int i=0; i < 100; i++) {
    x->Set(i, Number::New(isolate, i));
    y->Set(i, Number::New(isolate, i*i));
  }

  coord->Set(String::NewFromUtf8(isolate, "x"), x );
  coord->Set(String::NewFromUtf8(isolate, "y"), y );
  coord->Set(String::NewFromUtf8(isolate, "title"), String::NewFromUtf8(isolate, "y = f(x)") );

  args.GetReturnValue().Set(coord);
  std::cout << "Evaluate" << std::endl;
  std::cout << "rigolo socket on" << std::endl;
}

void Init(Local<Object> exports) {
  NODE_SET_METHOD(exports, "evaluate", Evaluate);
}

NODE_MODULE(parser, Init)

}  // namespace demo

int main() {
	yyin = stdin;
	yyparse();
	for (int i = 0; i < 10; i++) {
		cout << "f("<<  i << ") = " << Evaluation(i) << endl;
	}
	return 0;
}

void yyerror(const char* s) {
	fprintf(stderr, "Parse error: %s\n", s);
	exit(1);
}
