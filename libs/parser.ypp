%{

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <vector>
#include <algorithm>
#include <stack>
#include <fstream>
#include <map>
#include <limits>
#include <set>


using namespace std;

#include <string>

extern int yylex();
//extern int yyparse();
extern FILE* yyin;
void yyerror(const char* s);
vector<double> values;
vector<int>    postfixee;
vector<int> indice;
vector<string> nom;
map<string,double> constante ;
map<string,double>::iterator it;
double assembleur(string test);
std::string debug_file("debug");
ofstream debug(debug_file.c_str());
ofstream colorStream("color");
ofstream titleStream("title");
ofstream yaxisStream("yaxis");
ofstream xaxisStream("xaxis");
ofstream errorStream("error");
ofstream xStream("x");
ofstream yStream("y");
ofstream zStream("z");
double xinf=0;
double xsup=20;
bool yaxisDefined = false;
bool xaxisDefined = false;
double ymin=-10, ymax=10;
// 3D
double xmin=-10, xmax=10;
vector<string> dessine;
int nbrline;
std::set<std::string>outputs;
std::set<std::string>::iterator output;
%}

%error-verbose

%union {
	int ival;
	double fval;
	char* sval;
}

%token<fval> FLOAT
%token<sval> COLOR VARIABLE
%token PLUS MINUS MULTIPLY DIVIDE LEFT RIGHT EQUAL MINUSALONE
%token NEWLINE QUIT
%token  X Y
%token MPI EXP LN LOG SIN COS TAN ARCTAN ARCSIN ARCOS SQRT POW DRAW BRACKETR BRACKETL COMA ABS
%left PLUS MINUS
%left MULTIPLY DIVIDE
%left POW
//%left RIGHT LEFT

%type<fval> mixed_expression

%start calculation

%%


calculation:
	| calculation line{
		nbrline++;
		if(indice.size()==0){
			indice.push_back(0);
		}
		indice.push_back(values.size());cout<<indice[0]<<endl;
};

line: NEWLINE
		/*| mixed_expression NEWLINE {}*/
		| DRAW VARIABLE LEFT X RIGHT NEWLINE{
			string a1= $2;
			string a2="blue";
			nom.push_back("nul");
			dessine.push_back(a1);
			colorStream <<a2 << endl;
			titleStream << a1;
			if(!yaxisDefined) {
				yaxisStream << ymin << " " << ymax;
			}
		}
		| DRAW VARIABLE LEFT X RIGHT COLOR NEWLINE{
			string a1= $2; string a2=$6;colorStream << a2 << endl;
			nom.push_back("nul");
			dessine.push_back(a1);
			if(!yaxisDefined) {
				yaxisStream << ymin << " " << ymax;
			}
		}
		// 3D
		| DRAW VARIABLE LEFT X COMA Y RIGHT NEWLINE{
			string a1= $2;
			string a2="blue";
			nom.push_back("nul");
			dessine.push_back(a1);
			colorStream <<a2 << endl;
			titleStream << a1;
			if(!yaxisDefined) {
				yaxisStream << ymin << " " << ymax;
			}
			if(!xaxisDefined) {
				xaxisStream << xmin << " " << xmax;
			}
		}
		| DRAW VARIABLE LEFT X COMA Y RIGHT COLOR NEWLINE{
			string a1= $2; string a2=$8;colorStream << a2 << endl;
			nom.push_back("nul");
			dessine.push_back(a1);
			if(!yaxisDefined) {
				yaxisStream << ymin << " " << ymax;
			}
			if(!xaxisDefined) {
				xaxisStream << xmin << " " << xmax;
			}
		}
    | QUIT NEWLINE { printf("bye!\n"); exit(0); }
		| VARIABLE LEFT X RIGHT EQUAL mixed_expression NEWLINE {string a1=$1;nom.push_back(a1);cout<<"ypp: "<< nom[nbrline] <<endl<<endl;}
		| VARIABLE LEFT X COMA Y RIGHT EQUAL mixed_expression NEWLINE {string a1=$1;nom.push_back(a1);cout<<"ypp: "<< nom[nbrline] <<endl<<endl;}
		//| VARIABLE EQUAL mixed_expression NEWLINE { nom.push_back("nul");cout<<nom[nbrline]<<endl;}
		| mixed_expression NEWLINE {nom.push_back("nul");cout<<nom[nbrline]<<endl;}
		| VARIABLE EQUAL FLOAT NEWLINE {nom.push_back("nul");string a= $1;constante[a]=$3;}
;


mixed_expression: MPI { postfixee.push_back(FLOAT); values.push_back(M_PI); }
		| VARIABLE LEFT X RIGHT {string a=$1;assembleur(a);}
		| mixed_expression PLUS mixed_expression	 {cout<<nbrline<<endl; postfixee.push_back(PLUS); values.push_back(0); }
		| mixed_expression POW mixed_expression	 { postfixee.push_back(POW); values.push_back(0); }
	  | mixed_expression MINUS mixed_expression	 { postfixee.push_back(MINUS); values.push_back(0);}
		| MINUS mixed_expression	 { postfixee.push_back(MINUSALONE); values.push_back(0);}
	  | mixed_expression MULTIPLY mixed_expression {postfixee.push_back(MULTIPLY); values.push_back(0); }
	  | mixed_expression DIVIDE mixed_expression	 { postfixee.push_back(DIVIDE); values.push_back(0); }
		| X EQUAL BRACKETL MINUS FLOAT COMA FLOAT BRACKETR {
			xinf=(-$5); xsup=$7;
		}
		| X EQUAL BRACKETL FLOAT COMA MINUS FLOAT BRACKETR {xinf=$4; xsup=(-$7);}
		| X EQUAL BRACKETL MINUS FLOAT COMA MINUS FLOAT BRACKETR {xinf=(-$5); xsup=(-$8);}
		| X EQUAL BRACKETL FLOAT COMA FLOAT BRACKETR {xinf=$4; xsup=$6;}
		| Y EQUAL BRACKETL MINUS FLOAT COMA FLOAT BRACKETR { yaxisStream << -$5 << " " << $7; yaxisDefined = true;}
		| Y EQUAL BRACKETL FLOAT COMA MINUS FLOAT BRACKETR { yaxisStream << $4 << " " << -$7; yaxisDefined = true;}
		| Y EQUAL BRACKETL MINUS FLOAT COMA MINUS FLOAT BRACKETR { yaxisStream << -$5 << " " << -$8; yaxisDefined = true;}
		| Y EQUAL BRACKETL FLOAT COMA FLOAT BRACKETR {yaxisStream << $4 << " " << $6;yaxisDefined = true;}
		| LEFT mixed_expression RIGHT		 { }
		| SIN LEFT mixed_expression RIGHT { postfixee.push_back(SIN); values.push_back(0); }
		| COS LEFT mixed_expression RIGHT { postfixee.push_back(COS); values.push_back(0); }
		| TAN LEFT mixed_expression RIGHT { postfixee.push_back(TAN); values.push_back(0); }
		| ARCSIN LEFT mixed_expression RIGHT { postfixee.push_back(ARCSIN); values.push_back(0); }
		| ARCOS LEFT mixed_expression RIGHT { postfixee.push_back(ARCOS); values.push_back(0); }
		| ARCTAN LEFT mixed_expression RIGHT { postfixee.push_back(ARCTAN); values.push_back(0); }
		| EXP LEFT mixed_expression RIGHT { postfixee.push_back(EXP); values.push_back(0); }
		| LN LEFT mixed_expression RIGHT { postfixee.push_back(LOG); values.push_back(0); }
		| LOG LEFT mixed_expression RIGHT { postfixee.push_back(LOG); values.push_back(0); }
		| SQRT LEFT mixed_expression RIGHT { postfixee.push_back(SQRT); values.push_back(0); }
		| ABS LEFT mixed_expression RIGHT { postfixee.push_back(ABS); values.push_back(0); }
		| X { cout<<nbrline<<endl; postfixee.push_back(X); values.push_back(0); }
		| FLOAT {
			cout<<nbrline<<endl;
		postfixee.push_back(FLOAT);
		values.push_back($1);
		}
		| VARIABLE {string a=$1;it=constante.find(a);if(it!=constante.end()){postfixee.push_back(FLOAT);double v=it->second;values.push_back(v); }else{postfixee.push_back(FLOAT);values.push_back(0);
			errorStream << "<em style=\"color:orange;\">warning: the constant "<<a<<" is not defined(remplaced by 0)</em>" << endl;}}
;




//constant : FLOAT { $$ = $1; }

%%



double Evaluation(double x,int ind){

	stack <double> pile;

	double a, b;
	for (int i = indice[ind]; i < indice[ind+1]; i++) {
		switch (postfixee[i]) {
			case PLUS :
			     a = pile.top(); pile.pop();
					 b = pile.top(); pile.pop();
					 pile.push(a+b);
			break;
			case FLOAT:
			     pile.push(values[i]);
			break;
			case X :
				pile.push(x);
				break;
			case MULTIPLY:
					a = pile.top(); pile.pop();
					b = pile.top(); pile.pop();
					pile.push(a*b);
			break;
			case MINUS:
					a = pile.top(); pile.pop();
					b = pile.top(); pile.pop();
					pile.push(b-a);
			break;
			case MINUSALONE:
					a = pile.top(); pile.pop();
					pile.push(-a);
			break;
			case DIVIDE:
				a = pile.top(); pile.pop();
				b = pile.top(); pile.pop();
				if(a <= 0.005 && a >= -0.005 ) {
					debug << "division by zero" << endl;
					/*errorStream << "<em style=\"color:orange;\">warning: division by zero</em>" << endl;*/
					outputs.insert(string("<em style=\"color:orange;\">warning: division by zero</em>"));
					return std::numeric_limits<double>::quiet_NaN();
				}
				pile.push(b/a);
			break;
			case SIN:
				a = pile.top(); pile.pop();
				b=sin(a);
				pile.push(b);
			break;
			case COS:
				a = pile.top(); pile.pop();
				b=cos(a);
				pile.push(b);
			break;
			case TAN:
				a = pile.top(); pile.pop();
				b=tan(a);
				pile.push(b);
			break;
			case EXP:
				a = pile.top(); pile.pop();
				b=exp(a);
				pile.push(b);
			break;
			case LN:
				a = pile.top(); pile.pop();
				if(a <= 0) {
					/*errorStream << "<em style=\"color:orange;\">warning: ln is not defined in this area</em>" << endl;*/
					outputs.insert(string("<em style=\"color:orange;\">warning: ln is not defined in this area</em>"));
					return std::numeric_limits<double>::quiet_NaN();
				}
				b=log(a);
				pile.push(b);
			break;
			case LOG:
				a = pile.top(); pile.pop();
				if(a <= 0) {
					/*errorStream << "<em style=\"color:orange;\">warning: log is not defined in this area</em>" << endl;*/
					outputs.insert(string("<em style=\"color:orange;\">warning: log is not defined in this area</em>"));
					return std::numeric_limits<double>::quiet_NaN();
				}
				b=log10(a);
				pile.push(b);
			break;
			case SQRT:
				a = pile.top(); pile.pop();
				b=sqrt(a);
				pile.push(b);
			break;
			case POW :
			     a = pile.top(); pile.pop();
					 b = pile.top(); pile.pop();
					 pile.push(pow(b, a));
			break;
			case ABS :
				a = pile.top(); pile.pop();
				b=abs(a);
				pile.push(b);
			break;
			case ARCSIN:
				a = pile.top(); pile.pop();
				b=asin(a);
				pile.push(b);
			break;
			case ARCOS:
				a = pile.top(); pile.pop();
				b=acos(a);
				pile.push(b);
			break;
			case ARCTAN:
				a = pile.top(); pile.pop();
				b=atan(a);
				pile.push(b);
			break;
		}
	}
	return pile.top();
}

/*3D*/
double Evaluation(double x,double y, int ind){

	stack <double> pile;

	double a, b;
	for (int i = indice[ind]; i < indice[ind+1]; i++) {
		switch (postfixee[i]) {
			case PLUS :
			     a = pile.top(); pile.pop();
					 b = pile.top(); pile.pop();
					 pile.push(a+b);
			break;
			case FLOAT:
			     pile.push(values[i]);
			break;
			case X :
				pile.push(x);
				break;
			case Y :
				pile.push(y);
				break;
			case MULTIPLY:
					a = pile.top(); pile.pop();
					b = pile.top(); pile.pop();
					pile.push(a*b);
			break;
			case MINUS:
					a = pile.top(); pile.pop();
					b = pile.top(); pile.pop();
					pile.push(b-a);
			break;
			case MINUSALONE:
					a = pile.top(); pile.pop();
					pile.push(-a);
			break;
			case DIVIDE:
				a = pile.top(); pile.pop();
				b = pile.top(); pile.pop();
				if(a <= 0.005 && a >= -0.005 ) {
					debug << "division by zero" << endl;
					outputs.insert(string("<em style=\"color:orange;\">warning: division by zero</em>"));
					return std::numeric_limits<double>::quiet_NaN();
				}
				pile.push(b/a);
			break;
			case SIN:
				a = pile.top(); pile.pop();
				b=sin(a);
				pile.push(b);
			break;
			case COS:
				a = pile.top(); pile.pop();
				b=cos(a);
				pile.push(b);
			break;
			case TAN:
				a = pile.top(); pile.pop();
				b=tan(a);
				pile.push(b);
			break;
			case EXP:
				a = pile.top(); pile.pop();
				b=exp(a);
				pile.push(b);
			break;
			case LN:
				a = pile.top(); pile.pop();
				if(a <= 0) {
					outputs.insert(string("<em style=\"color:orange;\">warning: ln is not defined in this area</em>"));
					return std::numeric_limits<double>::quiet_NaN();
				}
				b=log(a);
				pile.push(b);
			break;
			case LOG:
				a = pile.top(); pile.pop();
				if(a <= 0) {
					outputs.insert(string("<em style=\"color:orange;\">warning: log is not defined in this area</em>"));
					return std::numeric_limits<double>::quiet_NaN();
				}
				b=log10(a);
				pile.push(b);
			break;
			case SQRT:
				a = pile.top(); pile.pop();
				b=sqrt(a);
				pile.push(b);
			break;
			case POW :
			     a = pile.top(); pile.pop();
					 b = pile.top(); pile.pop();
					 pile.push(pow(b, a));
			break;
			case ABS :
				a = pile.top(); pile.pop();
				b=abs(a);
				pile.push(b);
			break;
			case ARCSIN:
				a = pile.top(); pile.pop();
				b=asin(a);
				pile.push(b);
			break;
			case ARCOS:
				a = pile.top(); pile.pop();
				b=acos(a);
				pile.push(b);
			break;
			case ARCTAN:
				a = pile.top(); pile.pop();
				b=atan(a);
				pile.push(b);
			break;
		}
	}
	return pile.top();
}

double assembleur(string test){
	for(int i=0;i<nom.size();i++){
		if(test.compare(nom[i])==0){
			for(int h=indice[i];h<indice[i+1];h++){
				values.push_back(values[h]);
				postfixee.push_back(postfixee[h]);
			}
			return 0;
		}
	}
	postfixee.push_back(FLOAT);
	values.push_back(0);
	errorStream << "<em style=\"color:orange;\">warning: the function "<<test<<"(x) is not defined(remplaced by 0)</em>" << endl;

	return (-1);

}



int main() {
	yyin = stdin;
	yyparse();
	cout<<dessine.size()<<endl;

	if(dessine.size()>0){
		for(double h=0;h<dessine.size();h++){
			int print=0;
			for(double k=0;k<nom.size();k++){
				if(dessine[h].compare(nom[k])==0){
					print=1;
					cout<<"je suis dans l'evaluation"<<endl;
					/*if 2D*/
					for (double i = xinf; i < xsup; i+=0.05) {
						if (!isnan(Evaluation(i,k))) {
							yStream << Evaluation(i,k) << " ";
							xStream << i << " ";
						} else {
							debug << "NAN" << endl;
							xStream << i << " ";
							yStream << "nan" << " ";
						}
					}

					yStream << endl;
					/*if 3D*/
					/*for (double i = xinf; i < xsup; i+=0.05) {
							for (double j = yinf; j < ysup; j+=0.05) {
							if (!isnan(Evaluation(i,j,k))) {
								xStream << i << " ";
								yStream << j << " ";
								zStream << Evaluation(i,j,k) << " ";
							} else {
								debug << "NAN" << endl;
								xStream << i << " ";
								yStream << j << " ";
								zStream << "nan" << " ";
							}
						}
					}
					yStream << endl;
				}*/

				}
			}

			if(print==0){
				ofstream colorStream("color");
				errorStream << "<em style=\"color:red;\">error: "<<dessine[h]<<"(x) can't be draw, because is not defined</em>" << endl;
			}

		}
	}

	for(output=outputs.begin(); output!=outputs.end(); output++) {
		errorStream << *output << endl;
	}
	return 0;

}

void yyerror(const char* s) {
	/*fprintf(stderr, "Parse error: %s\n", s);*/
	ofstream colorStream("color");
	ofstream errorStream("error");
	errorStream << "<em style=\"color:red;\">error: unexpected "<< s <<"  </em>" << endl;
	exit(1);
}
